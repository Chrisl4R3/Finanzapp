import jwt from 'jsonwebtoken';

export const verifyToken = (req, res, next) => {
  console.log('=== Verificando Token ===');
  console.log('URL:', req.method, req.originalUrl);
  console.log('Headers:', JSON.stringify(req.headers, null, 2));
  
  const authHeader = req.headers.authorization;
  
  if (!authHeader) {
    console.log('‚ùå No se encontr√≥ el header de autorizaci√≥n');
    return res.status(401).json({ message: 'No se proporcion√≥ token de autenticaci√≥n' });
  }

  const token = authHeader.split(' ')[1];
  if (!token) {
    console.log('‚ùå No se encontr√≥ el token en el header de autorizaci√≥n');
    return res.status(401).json({ message: 'No se proporcion√≥ token de autenticaci√≥n' });
  }

  try {
    console.log('üîç Verificando token:', token.substring(0, 20) + '...');
    const decoded = jwt.verify(token, 'tu_secreto_jwt');
    console.log('‚úÖ Token decodificado:', decoded);
    
    if (!decoded.userId) {
      console.log('‚ùå No se encontr√≥ userId en el token decodificado');
      return res.status(401).json({ message: 'Token inv√°lido: no contiene userId' });
    }

    req.userId = decoded.userId;
    console.log('‚úÖ userId establecido en el request:', req.userId);
    console.log('=== Verificaci√≥n Completada ===\n');
    next();
  } catch (error) {
    console.error('‚ùå Error al verificar token:', error);
    return res.status(401).json({ message: 'Token inv√°lido' });
  }
};
